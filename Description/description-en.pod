-*- encoding: utf-8; indent-tabs-mode: nil -*-

=encoding utf-8

=head1 Introduction

This document is not an exact translation of F<description-fr.pod>.
The documents are about two years apart. In the interim Perl 6 has been renamed
Raku and I have learned much about this language. And I have removed
a few jokes which would puzzle the readers who does not share the same background
as me.

This project was what is called I<Conference-driven development>.
In 2018, I was looking for a project which could use Raku and MongoDB and
which could be interesting to the audience of the French Perl Workshop.
So I dug out from the depths of my memory an idea I had in the early 1980's
when I discovered Nova Games'
L<"Ace of Aces"|https://boardgamegeek.com/boardgame/798/ace-aces-handy-rotary-series>. 
Only later did I discover
that I could use Bailador, the Raku port of
L<Dancer2|http://perldancer.org/>
and that the conference
would be within a few weeks of the 100th anniversary of Richthofen's death
and of the 100th anniversary of the creation of the RAF. If you extend the
celebration window to a few months, it was also the 100th anniversary of
Guynemer's passing and of the 1918 armistice.

A few years ago, we learned that Google had experimented with I<supervised machine learning>
writing Google Alpha Go, a program to play Go. Then we learned about another
experiment, Google Alpha Go Zero and the chess equivalent Google
Alpha Chess Zero, which were I<unsupervised machine learning>
or I<machine self-learning>.

The software knows only the rules of the game and how to determine the result
of a game that has ended (win / draw / loss). It knows absolutely nothing about
the tactics or the strategy of the game. Then the software plays a huge 
number of games against itself, analyses the results and learns which are the
good moves and which are the bad moves.
 
This idea of machine self-learning did not appear in 2017 or 2018. I have read an article
in the 1970's describing what would be such a system for tic-tac-toe.
A few years later, when I discovered Nova Games' Ace of Aces, I thought that
this game, much more complicated than tic-tac-toe but hugely simpler than chess,
could be the ground for a similar self-learning system. For more than thirty years,
this idea was not implemented, until I decided to prepare this talk for FPW 2018.

=head2 A Sidenote about Hypertext Links Forerunners

When did we begin to number the pages of a book (or of a papyrus roll)?
When did we write for the first time "please see page #"?
When did we add an index of important words at the end of a book?
When did we write a book with an I<intensive> use of "see page #" references?

With the rise of natural sciences, especially botany, in the 18th century,
several books describing the flora of various regions were published. My father
showed me one of them, published in the 1950's and organised in a Q&A manner.

=for html
<blockquote>

In the leaves, how are the veins organized? If they are parallel, see page 17.
If they build a tree-like network, see page 33.

=for html
</blockquote>

And on pages 17 and 33, you would find other questions, other answers and other
target page numbers.

I have been told that in the 1960's, IBM published hardware maintenance manuals
based on a similar principle:

=for html
<blockquote>

If smoke pours out of the disk drive, see page 17. If it goes "crrr crrr crrr", see
page 33.

=for html
</blockquote>

The questions above are apocryphal, of course, but you can see the pattern.

In the 1970's, I watched on television a skit about "the shortest dictionary 
in the world". In dictionaries, what is space consuming is the definitions. So
by getting rid of the definitions, we can considerably reduce the size of the
dictionary. They gave a few examples. One I remember would give this in English:

  Clown: see circus
  Circus: see circle
  Circle: see club
  Club: see member
  Member: see parliament
  Parliament: see politician
  Politician: see clown

=head3 Warlock of the Firetop Mountain and its Legacy

In 1982, a new kind of book was published. The first title was
L<Warlock of the Firetop Mountain|http://fightingfantasy.wikia.com/wiki/The_Warlock_of_Firetop_Mountain_(book)>. 
In this kind of book, the player would choose how the story would develop. For example:

=for html
<blockquote>

Paragraph 1. You enter an inn. In the back of the main room, you see the innkeeper
cleaning a few glasses. On your left, in a dark corner, a man sits alone at a table, his
head covered by a black hood. On your right, you see (and hear) some boisterous 
mountain dwarves quaffing beer and laughing loudly. What do you do? You speak to
the innkeeper, go to paragraph 17. You sit down beside the hooded man, go to paragraph
33. You hail the dwarves with the words "Hello lawn ornaments!", go to paragraph 52.

=for html
</blockquote>

I had five of these books, in French. One is lost and I still have the four others.

=for HTML
<img src='Les_livres_dont_vous_etes_le_heros.jpg' alt="Four interactive books" width='85%' />

I<Personal picture. License is the same as for the text.>

=head1 Ace of Aces, the Game

In 1981, Alfred Leonardi filed a patent for a new type of game, which he had
developed with Douglas Kaufman. Instead of gathering two players in the same room around
the same game map and making them push cardboard markers, each player has a booklet
in which each page shows a plane seen from the cockpit of another plane.

=for HTML
<img src='pic1051809-l.jpg' alt="Example of game" width='85%' />

I<Picture taken by Chris Norwood and published on L<Boardgame Geek|https://boardgamegeek.com/image/1051809/ace-aces-handy-rotary-series?size=large>. 
License L<Creative Commons Attribution 3.0 Unported, CC BY 3.0|https://creativecommons.org/licenses/by/3.0/>.>

=head2 Rules Summary

The patent gives an example of a game turn. The players begin this turn on page 1.
In both booklets, the picture shows that both planes have the same heading and that
the DR1 is located at the Camel's 4 o'clock, or conversely, the Camel is at the DR1's 10 o'clock.

=for HTML
<img src='Page-1-GB-All.png' alt="Page 1 in both booklets" width='100%' />

I<Pictures from patent USP 4,378,118, in public domain since 2001.>

At the bottom of each page, you notice a line of arrows and a line of numbers. 
Each number refers to a page of the booklet and each arrow is a graphical representation
of a maneuver the plane can execute. Each player chooses an arrow and gives the
corresponding page number to his opponent. For example, the German player
chooses the leftmost arrow and says:

-- I send you page 8.

At the same time, the British player chooses the arrow below "EF" in the "Cruising Left" part
and answers:

-- Go to page 48.

=for HTML
<img src='Manoeuvre-1-8-48.png' alt="Page 1, arrow pointing to page 8 and arrow pointing to page 48" />

I<Pictures from patent USP 4,378,118, in public domain since 2001.>

The German player opens his booklet page 48 and applies the same maneuver as before: same arrow,
different page number, 96. At the same time, the British player opens his booklet page 8,
spots the same maneuver and reads the page number. They obtain the same page number, 96.

=for HTML
<img src='Pages-48-8.png' alt="German booklet page 48 and British booklet page 8" />

I<Pictures from patent USP 4,378,118, in public domain since 2001.>

The final page for the game turn is page 96. As you can see, I<Ace of Aces> is not only a forerunner
of hypertext links, but it is also a forerunner for First Person Shooter games, 12 years or so
before Wolfenstein 3D and Doom.

=for HTML
<img src='Page-96-All-GB.png' alt="German booklet page 96 and British booklet page 96" />

I<Pictures from patent USP 4,378,118, in public domain since 2001.>

The fire / damage rules are very simple. Each plane starts with 12 hit points. Each time
you end your turn on a page where your plane receives bullets from the other guy, you lose
1, 2 or 4 hit points, depending on the specific page. Intermediate pages are not taken into
account. When your hit point total is zero or negative, your plane is shot down.

=head2 Explanation of the Mechanism

With this rule mechanism, the final pages are always the same for both players. 
Many newbie players are amazed by this, yet the explanation is simple.
Forget the skies above Poelcapelle or 
L<Vaux-sur-Somme|http://military.wikia.com/wiki/Manfred_von_Richthofen>,
and imagine you are in a big empty parking lot, with only a Mini Austin and 
a VW Beetle. At first, they set up in the following position (use the plain lines
and ignore the dotted lines):

=for html
<img src='Exp-1-A.png' alt='Start position for the cars' />

I<Personal picture. License is the same as for the text.>
I<Picture from patent USP 4,378,118, in public domain since 2001.>

This position corresponds to page 1 of both booklets.

Now, suppose the Beetle moves as shown below, while the Mini stays idle.

=for html
<img src='Exp-1-B.png' alt='Mini on its start position, Beetle on its end position' />

I<Personal picture. License is the same as for the text.>
I<Picture from patent USP 4,378,118, in public domain since 2001.>

After this movement, we obtain the situation of page 8. And now, the Beetle stops
and the Mini starts moving.

=for html
<img src='Exp-1-C.png' alt='End position for the cars' />

I<Personal picture. License is the same as for the text.>
I<Picture from patent USP 4,378,118, in public domain since 2001.>

The end result is the position of page 96.

=for html
<img src='Exp-1-D.png' alt='End position for the cars' />

I<Personal picture. License is the same as for the text.>
I<Picture from patent USP 4,378,118, in public domain since 2001.>

Second step of the experiment. Both cars come back to the starting position
corresponding to page 1.

=for html
<img src='Exp-2-A.png' alt='Start position for the cars' />

I<Personal picture. License is the same as for the text.>
I<Picture from patent USP 4,378,118, in public domain since 2001.>

Now the Mini is the first to move, while the Beetle stays idle. So we obtain
the position like on page 48.

=for html
<img src='Exp-2-B.png' alt='Beetle on its start position, Mini on its end position' />

I<Personal picture. License is the same as for the text.>
I<Picture from patent USP 4,378,118, in public domain since 2001.>

And when the Beetle moves, the end position is the position of page 96.

=for html
<img src='Exp-2-C.png' alt='End position for the cars' />

I<Personal picture. License is the same as for the text.>
I<Picture from patent USP 4,378,118, in public domain since 2001.>

Third step of the experiment. The cars come back to their page 1 position.
Now they move I<simultaneously>. As in both previous steps, the end position
is the page 96 position.

=for html
<img src='Exp-3-B.png' alt='End position for the cars' />

I<Personal picture. License is the same as for the text.>
I<Picture from patent USP 4,378,118, in public domain since 2001.>

So, there is no difference between moving simultaneously or moving sequentially
in this or that order. This is true both for cars in a parking lot and for planes
in the Picardy or Flanders sky.

=head3 Special Case, Page 223

If you read some help files provided by
L<Boardgame Geek|https://www.boardgamegeek.com/boardgame/798/ace-aces-handy-rotary-series/files>,
you will understand that the game is based on a 37-hexagon grid and on a 6-heading orientation,
which produce 222 pages, for all relative positions of the planes, provided they are
with 3 hexagons of each other. But what happens if the distance is greater?
If, because of their maneuvers, the planes are separated by a distance greater than this
threshold, the booklets display a special page, 
L<Page 223|https://www.boardgamegeek.com/image/157327/ace-aces-handy-rotary-series>,
which show clouds behind which
the enemy plane has vanished. Even if the page shows clouds in front of the plane, the
enemy can have disappeared behind.

If only one player has an intermediate page 223, we use the intermediate page of the
other player to obtain the final page of the game turn. You can no longer check the consistency
of the final page as shown above. This situation arises, for example, when the planes are 
pursuing each other at a big distance. Let us suppose we are on page 180, where the Camel
is in the DR.1's 11 o'clock and let us suppose the plane move forward at medium speed.
If we apply first the Camel's move, the contact is lost and the intermediate page is page 223,
where no maneuver is shown. On the other hand, if we apply first the DR.1's move, the intermediate
page is page 60, where the Camel is in the DR.1's 10 o'clock at medium distance. Then we apply the
Camel's move and we arrive on page 180. This number cannot be cross-checked.

On the other hand, if both players' intermediate pages are page 223, or if the final page is page 223,
the planes have really broken contact. Each player chooses to stay and fight or to flee.
If both planes flee, the game ends in a draw. If both planes choose to stay, the fight begins again
on a neutral page as at the beginning of the game, but the difference is that the planes keep
their current level of damage. If only one plane decides to flee, its opponent obtains a half-victory.
But sometimes, it is better to flee and live and fight another day, than to press on the current
fight and lose and give a full victory to one's opponent.

=head3 Other Special Case, Tailing

when a plane is in the other plane's rear quadrant (4 o'clock to 8 o'clock) with a similar
heading, we consider that this plane is I<tailing> the other. It was the case on page 1
above. I did not mention it for pedagogical reasons. When a plane is tailing another,
the simultaneous moves are no longer quite simultaneous. The sequence of play is now
the following:

=over 4

=item 1 The tailed plane chooses a maneuver.

=item 2 The player tells his opponent whether the chosen maneuver is
a leftward maneuver, a rightward maneuver or a forward maneuver. He does not
give the intermediate page number.

=item 3 The tailing player chooses a maneuver.

=item 4 Both players simultaneously announce their intermediate page numbers.

=item 5 Both players compute the final page.

=back

=head3 Altitude

This is a game about planes, so we must deal with altitude, of course!
Well, no. For the basic rules, the game
L<just uses two dimensions|https://tvtropes.org/pmwiki/pmwiki.php/Main/TwoDSpace>.
There is only one instance when altitude is implied. There are six pages where both
aircraft are in the same hex. It is convenient to suppose that there are separated 
in altitude by a few meters. This is the players' opinion, the rules say nothing about
that.

There are advanced rules which require the players to log the altitude at each game turn.
The additional burden is not worth it. 

=head3 A Few Remarks

During a game turn, you must keep in mind:

=over 4

=item 1 the initial page number,

=item 2 the maneuver you chose,

=item 3 the intermediate page number you gave to your opponent,

=item 4 the intermediate page number you received from your opponent,

=item 5 the final page number

=item 6 the number of remaining hit points,

=item 7 optionaly the number of remaining hit points for your opponent.

=back

According to some studies, the human short-term memory has room for 7 ± 2 pieces of data (except for
waiters in bars, who are way beyond this limit). Unless you are in the lower part of the
range, you can play I<Ace of Aces> without writing anything and without arraying markers on
any board. You can play anywhere: on the beach, beside the coffee machine, in a waiting
room, in the bus. And if your short-term memory is in the upper-range, you can even play
in the bus and not miss your stop.

=head2 Extensions

This game has two extensions, one with late war planes
(I<L<Powerhouse|https://boardgamegeek.com/boardgame/7104/ace-aces-powerhouse-series>>,
Spad XIII vs Fokker D.VII) the other with early war planes
(I<L<Flying Machines|https://boardgamegeek.com/boardgame/7103/ace-aces-flying-machines>>,
Airco DH2 vs. Fokker E.III). There is also a WWII variant
(I<L<Wingleader|https://boardgamegeek.com/boardgame/6504/ace-aces-wingleader>>, 
P-51 Mustang vs FW190), a cold war version 
(I<L<Jet Eagles|https://boardgamegeek.com/boardgame/1991/ace-aces-jet-eagles>>,
F-15 Eagle vs MiG-29 Fulcrum). There is even a Star Wars version,
I<L<Starfighter Battle Book|https://boardgamegeek.com/boardgame/3152/star-wars-starfighter-battle-book>>,
X-wing vs TIE-fighter, this last one published by West End Games.

All the bookets have the same positions at the same page numbers. For example, in every booklet,
page 96 is the page where the "bad guy" is tailing the "good guy" and shooting at him, at medium distance, with the
same heading. You can play any combination of a "good guy" booklet and a "bad guy" booklet,
even staging a fight between a X-Wing and a Fokker E.III! Or you can just match
a F-15 against a FW190, the closest way to reenact the
L<famous fight|https://www.youtube.com/watch?v=f3XNEWtJF0o>
between a pair of F-14's and a pair of A6M2 Zeros.

There are just a few problems. The distance scale is not the same from a game to the other: a few meters
for the WWI version, several hundred meters for the Cold War version. And the hit points are
much different. You will need a big dose of 
L<willing suspension of disbelief|http://tvtropes.org/pmwiki/pmwiki.php/Main/WillingSuspensionOfDisbelief>
to play such a game!

And you cannot set up a dogfight between two "good guys" (e.g. F-15 vs P-51) or between two "bad guys"
(e.g. Fokker Dr1 vs FW190).

A bit of caution about I<Wingleader>. There is 
L<another game|https://boardgamegeek.com/boardgame/160418/wing-leader-victories-1940-1942>
with a similar name. If you are interested by this game and if you want to buy it, be sure
it is the right game.

=for html
<img src='As-des-As-Wingleader-Jet-Eagles.png' alt="Ace of Aces, First World War, Second World War and Cold War" />

I<Personal pictures. License is the same as for the text.>

=for html
<img src='Jet-Eagles-96.png' alt="Page 96 for Jet Eagles, 'Red Force' booklet and 'Blue Force' booklet" />

I<Personal pictures using a page in the booklets from Jet Eagles, copyright © 1990 Nova Game Designs, Inc.>

All these variants propose advanced rules, e.g. altitude, 2-vs-2 or, in the case
of I<Jet Eagles>, radars and missiles. Unfortunately, these rules are incompatible with
the  7 ± 2 short-term memory capacity. Except for a rule about compatibility between
two successive maneuvers, I do not plan to include these advanced rules in my programs.

There is also an extension 
I<L<Balloon Buster|https://boardgamegeek.com/boardgame/5736/ace-aces-balloon-buster>>
with a 2-vs-1 fight. The German player controls a rather passive
observation balloon and an anti-aircraft gun, while the British player
controls a plane.

Other similar extensions, but incompatible with the air combat series:
I<L<Shootout at the Saloon|https://boardgamegeek.com/boardgame/3089/bounty-hunter-shootout-saloon>>
translated in French as 
I<Le shérif et le hors-la-loi>,
I<L<Dragons Riders of Pern|https://boardgamegeek.com/boardgame/5735/dragonriders-pern-book-game>>
translated in French as 
I<les Maîtres des Dragons>
and a series I had not heard about before writing these explanations,
I<L<Lost Worlds|https://boardgamegeek.com/boardgame/3969/lost-worlds-adventure-set-i-ruins-ancients>>.

=for html
<img src='Le_sherif_et_le_hors-la-loi.png' alt="Shootout at the Saloon" />

I<Personal pictures using "Le Shérif et le Hors-la-loi", copyright © 1986 Gallimard,
French translation of "Shootout at the Saloon", Copyright © 1982 Nova Games Design Inc, copyright © 1986 Emithill Limited>

Since the patent is in the public domain, anyone can write and publish his own extension
to the Ace of Aces game. Here are a few examples:

=over 4

=item * Apache AH-64 vs Mi-24 Hind

=item * Quidditch: Griffindor vs Slytherin

=item * Superman vs Ironman

=item * Sparrowhawk vs hobbyist's drone

=back

Actually, I have chosen this last extension to add test data to my programs. I was
reluctant to use data from an existing game, because while the patent is expired, the
copyright is not.

=head1 Aces of Aces, the Programs

When I discovered the game, I thought that, actually, the game consists in mixing numbers
(page numbers) and symbols (maneuvers) to get other numbers. The role of the picture is 
just to add meaning for the benefit of the players and to help them choose the proper maneuver
symbol, provided the players know how the basics of plane flight, and provided they have 
some notions about the I<Dicta Boelke>, Sailor Malan's advices, "Boots" Blesse's 
I<No Guts, No Glory> and similar writings. But you can strip all this air combat decoration
and keep only the abstract mechanism, based on a finite state automaton with maybe a few
uses of a I<random> function. Hence the idea of a program playing the game without any knowledge
of air combat, but relying on a statistical analysis of previous games.

There are two parts in this project. First, preparation, to create booklets in electronic
format, by generating the files rather than typing them entirely from the paper version. Second, the game
itself, where cyber pilots fight against each other and learn from their mistakes.

=head2 Warning

When  I wrote  these programs,  I  used French  names for  everything:
programs, database  entities, variables, class names,  attribute names
and so  on. You may  have problems reading  the source files  and even
reading the  explanations. The only  exception is the  database, named
C<Ace_of_Aces>. Why? I do not remember.

=head2 Preparation

I have started with this part, of course. But I did not write the programs within the
Git repo, I wrote them in an external directory. Later, I cleaned them and I copied them
into the Git repo. You will not see my very first lines of Raku code.

Preparation itself is split into two steps. The first step consists in
establishing  the  relation between  page  numbers  and the  implicit
hexagon grid. For this, I have taken a booklet from an existing game and
I have copied enough pages to have at least one link to every one ot the 222 pages.

In the second step, for each aircraft, I write a JSON file describing the maneuvers
this plane can execute, I merge it with the database from the first step and
I generate a booklet, that is, the full list of transitions
(start page + maneuver) → end page. The program prints the booklet both in
JSON format and in HTML format.

You will learn more by reading the dedicated
L<documentation|https://github.com/jforget/Perl6-Alpha-As-des-As-Zero/blob/master/Preparation/description-en.pod>
for this step.

=head2 Game

The original game is meant for two human players with no umpire.
For the electronic players, I have prefered to use an umpire program, or
rather an umpire process, and two player processes. Both player processes use the
same Raku program, but the command line parameters are different.

To agree with the principles of Google Alpha Go Zero, the player program has absolutely
no knowledge of the flight mechanisms and of the air combat tactics. It just receives
from the umpire a list of possible maneuvers, chooses one of them and send it back to
the umpire.

The player program has two different modes. The first mode is the training mode, where
each maneuver is randomly chosen with equal probability. The second mode is the combat mode,
where the player program searches the database from similar situations encountered during 
previous games, evaluates which ones led to success and which ones led to failure, gives
different probabilities to these maneuvers and makes a random choice according to the probabilities.

Even in the combat mode, the maneuvers are chosen with a random function. So we prevent 
stereotypical plays, where each process would compute a minimax best solution and always obtain the
same choice in the same situation. The random choice gives a higher probability to the
best answer, but this does not prevent the program from choosing an unexpected maneuver
from time to time and take the enemy on his wrong foot.

The umpire program has a better knowledge of the flight mechanisms and the fire mechanisms, but
nothing about tactics. The umpire program reads the JSON files created by the preparation programs.
This allows it to know the relation (start page + maneuver) → end page. But the umpire program
does not know and does not care about the underlying hexagonal geometry.

=head3 Database

I have chosen L<MongoDB|https://www.mongodb.com/>
for the database. The reasons are not technical reasons (performance, for 
example), but the fact that I know data manipulation with SQL, but I am not familiar with
noSQL databases. The programs could be written with a SQL database, such as 
L<SQLite|https://sqlite.org/index.html>
or any other, but for me, it was less interesting.

During my FPW 2018 talk, someone remarked that MongoDB allows the storage of pictures,
which would be interesting for a game such as I<Ace of Aces>, which relies heavily
on pictures. Actually, this was not a criterion for my choice, I had no intention
to copy the plane pictures into the database.

The characteristics  of the various  aircraft are stored in  JSON text
files. At first,  it was the same for pilots,  which were described in
JSON text files. But I discovered  it was more convenient to store the
pilots in the database, the  gaming programs and the Bailador programs
would be  simpler. I  wrote a program  C<init-pilote> which  reads the
JSON  file describing  a pilot,  converts it  into a  Raku object  and
inserts  it  into the  C<Pilotes>  collection.  Similarly, I  wrote  a
program C<init-avion> (French for  "aircraft") which reads an aircraft
JSON file, converts  it and inserts it into  the C<Avions> collection.
For the training mode games, I need an anonymous pilot identified with
the same key  as the aircraft. So the  C<init-avion> program generates
this anonymous  pilot and inserts  it into the  C<Pilotes> collection.
The  JSON files  still  exist, but  they are  used  only for  database
initialization.

There  is a  problem when  reading back  the C<Avions>  and C<Pilotes>
documents into the  gaming programs and the Bailador  programs. On one
hand,  the  C<JSON::Class>  module generates  C<Avion>  and  C<Pilote>
objects from  a JSON  string, on  the other  hand the  MongoDB modules
generate C<BSON::Document>  objects, the data of which are accessed  with the same
syntax as hash  tables. There is no direct conversion  to a user class
such as  C<Avion> or C<Pilote>.  Should I write an  object constructor
which extracts  each value from  the C<BSON::Document> hash  table and
stores it into the corresponding attribute of the C<Pilote> / C<Avion>
object being created? Is there a  cleaner and simpler solution to this
dilemma?

In computer programming, there is a 
L<saying|https://stackoverflow.com/questions/288623/level-of-indirection-solves-every-problem>:
"Every problem can be solved by adding a level of indirection". I have
found  a similar  solution for  my current  problem. When  the program
creates  a C<Avions>  or  C<Pilotes> document  in  the database,  this
document contains  a C<json>  attribute to store  the raw  JSON string
used to  create the C<Avion>  or C<Pilote>  object. Then, in  the next
program,  when reading  the BSON  document,  I just  take the  C<json>
attribute  and I  build  the  C<Avion> or  C<Pilote>  object with  the
C<from-json>  method provided  by  C<JSON::Class>.  The only  required
entries  in  the  database   documents  are  C<identité>  (French  for
"identity") used as key and C<json> for the data payload. I have still
added some other entries to store some object attributes, because they
may be used for some database queries.

On  the other  hand, I  have not  defined classes  for games  and game
turns, I  use basic C<BSON::Document>  in the C<Parties>  and C<Coups>
collections respectively and  I use the hash table syntax  to read and
update data. Not very consistent, I agree.

=head3 Inter-Process Communication

Like I said above, there are three processes which send data to each other. Did I
use sockets? Message queues? No. I used a mechanism based on John le Carré spy novels,
the mailbox. The controlling officer writes his instructions to the spy on a microfilm
and inserts this microfilm into a agreed-upon discreet location: tree stump, crack between
two bricks in a wall, and the like. The spy comes a few hours later, takes the microfilm
and goes away. A few days later, after gathering the requested information, the spy 
delivers a new microfilm by inserting it in the same hidden place and the controlling
officer takes it in the same manner. This is the same with the umpire process and the
player processes. The umpire process writes a database record for each player. Then each
player process reads the record which applies to it, fills the missing data and rewrites
it. Then the umpire process reads the updated record.

Just as in John le Carré novels, if a process does not find the record it is waiting for,
it waits a few moments and it makes a new attempt. And as in John le Carré novels, 
after a number of failed attempts, the process considers something bad has happened 
on the other side and it stops all activities. The comparison ends there, because in
spy novels the spy is exfiltrated, while here the process executes a C<die>.

"With a hammer, everything looks like a nail". Indeed, but by doing so, I have only
one module to deal with, which reduces the number of standing issues (bugs and PEBCAK).

=head3 Umpire program: C<arbitre.p6>

The program begins,  as usual, with an initialization  step, where the
main variables are initialized. Nothing special to discuss.

Then you have  an event loop, which manages the  successive game turns
with the following steps:

=over 4

=item  1  Resolving  the  shooting  for the  previous  game  turn  and
computing the possible maneuver choices for the current turn.

=item 2 Writing these choices into the C<Coups> (game turn) collection for each player.

=item 3 Reading back the players' answers from the C<Coups> collection.

=item 4 Applying the transitions: initial page → intermediate page → final page.

=item 5 Checking whether a plane flees or not (or both planes).

=item 6 Dealing with the end of game (fleeing or destruction).

=back

=head4 Shooting

Fire combat for game turn I<n> is  actually computed in step 1 of turn
I<n>+1. Why? Because shooting involves  no choice from the players. It
is not necessary to execute a mailbox exchange just for the resolution
of any shooting.  We just wait for  the next turn and  the players are
warned they have lost some hit points  at the same time they are given
the  list of  maneuvers available  for the  new game  turn. It  may be
counter-intuitive, but I think the resulting programs are simpler.

Of course,  if step  1 computes that  a plane has  zero hit  points or
less, steps 2 to 5 are skipped  and we imediately deal with the end of
the game in step 6.

=head4 Tailing

For game turns where an aircraft is tailing another, steps 2 and 3 are
split in the following way:

=over 4

=item * 2A Writing into the C<Coups> (game turn) collection the choices for the tailed player.

=item * 3A Reading back the tailed player's answer from the C<Coups> collection.

=item  * 2B  Writing  into  the C<Coups>  (game  turn) collection  the
choices for  the tailing player, with  a G/A/D (left /  ahead / right)
indication relative to the tailed player's maneuver.

=item * 3B Reading back the tailing player's answer from the C<Coups> collection.

=back

When the umpire  program asks to the tailing plane  which maneuvers it
chooses,  it gives  a special  code to  the current  page number:  the
actual  number concatenated  with the  G/A/D code.  Going back  to the
example from  the patent,  the British  player is  page B<1>,  but the
German player is  page B<1G>, because the British player  has chosen a
leftward maneuver.  Pages 1G, 1A and  1D have exactly the  same set of
transitions  maneuver  →  final  page,   but  the  German  player  has
completely different sets of "previous situations" for page B<1G>, for
page B<1A> and for page B<1D>  from which to choose the next maneuver.
The player  program has no special  case for choosing a  maneuver when
tailing the enemy. The  price to pay is a that  the umpire program has
to  be careful  about  the page  number, which  is  no longer strictly
numeric and which might have a G/A/D letter or not.

=head4 List of Available Maneuvers

This step should not  require comments. But if you take  a look at the
conclusion paragraph  below, you will see  that the program has  a "no
quarters" option (I<à outrance>) for the training games. In this case,
the planes opt to  go on fighting, no matter how  many hit points they
have lost already. When this option  is on, the umpire program removes
all  maneuvers  which lead  to  an  intermediate  page 223.  The  only
exception is when I<all> maneuvers lead  to page 223, which can happen
with the  sparrowhawk. In these rare  cases, the list of  maneuvers is
not filtered.

On the other  hand, you cannot remove maneuvers which  would lead to a
I<final> page 223. So  the planes can end the game  turn on this page.
In this case, the umpire program gives  them a choice with 4 times the
attack option and only one fleeing option. So the fight most certainly
goes on. The probability is 16/25 instead of 1/4.

This filtering may  induce a cognitive bias in  the self-learning. But
this gives us richer training games  with many game turns, rather than
training games ending after a handful of turns.

=head4 End of Game

When the umpire  notices an end of game condition,  either a plane (or
both) having received enough hit points, of a plane (or both) fleeing,
the program  writes a last C<Coups>  record for each player,  with the
C<fini> ("ended") attribute set to C<1> and the C<résultat> ("result")
set to the  number of VP (+1,  -1, +1/2 or -1/2).  The pilot processes
will know that they must leave their event loop.

In  addition,  the umpire  program  writes  a  summary record  in  the
C<Parties> ("Games") collection.

=head3 Player program: C<joueur.p6>

The C<joueur.p6> program  is based on a loop,  reading each successive
game turn from the C<Coups> collection  and rewriting it to notify the
selected maneuver to the umpire.

Each player has two  attributes, I<psycho-rigidité> (mental stiffness)
and I<perspicacité> (perspicacity), used  to choose the next maneuver.
The I<psycho-rigidité>  is a  float greater  than or  equal to  1, the
I<perspicacité> is a float between 0 and 1.

Here are the successive steps for a game turn.

=head4 Extracting Similar Situations

The  program extracts  from  the C<Coups>  collection  all game  turns
similar to the current game turn, using the following criteria:

=over 4

=item 1 Same page.

=item 2 Previous game (according to the date-hour key).

=item 3 Same pilot or just any similar pilot.

=back

Let us look again at the criteria.

Same page: Remember that, for a tailing plane located on, say, page 1,
there are three different pages, page B<1G>, page B<1A> and page B<1D>
depending on the choice of the tailed plane for its next maneuver. The
situations from these pseudo-pages are not mixed together.

Previous game: We do not consider  the previous turns from the current
game, because we do not know the  final result yet. We do not consider
the next  games. It may seem  obvious, but the access  routine is also
used by  the website in the  page describing how the  player chose the
maneuver. This page may be accessed  several months after the game was
played, so we  need this criterion to reenact the  decision process as
it happened.

Same pilot  or similar. A  pilot acts  according to his  own knowledge
about  how his  plane  performs. But  he acts  also  according to  the
lessons he  received from his  instructors and  his peers. Let  us use
Guynemer on  a SPAD  XIII as  an example.  His instructors  were Jules
Védrines  and Paul  Tarascon. So  Guynemer will  use the  knowledge he
accumulated  himself, plus  the lessons  from the  training fights  by
anonymous pilots flying SPAD XIII's  and the knowledge that was taught
him by Védrines and Tarascon. In  other words, he will select C<Coups>
documents for  which the  C<identité> field  belongs to  the following
list (in Raku syntax):

  < Guynemer SPAD_XIII Vedrines Tarascon >

To be consistent, we must ensure that Védrines and Tarascon have flown
SPAD XIII  too. On  the other  hand, we  can imagine  a pilot  who has
learnt flying and fighting on a Fokker  E.III and who is assigned to a
Jasta flying Fokker D.VII's.

Another remark: the  C<ref> attribute exists in version V1,  but it is
not used. In other words, in version V1, Guynemer will use only:

  < Guynemer SPAD_XIII >

=head2 Conclusion: Lessons Learned with Ace of Aces

A point  which surprised me, although  I could have guessed  it before
discovering it, is  the answer to page 223 when  fighting. The purpose
of the flight  (from the verb "to  flee", not "to fly") is  to allow a
damaged plane to survive  and to grant no more than  one half point to
the opponent, instead  of staying involved in a bad  fight and, in the
end, grant a  full victory point to the enemy.  Yet, the pilots nearly
always choose to stay and fight, even in desperate situations.

What happens  in the programs,  is that  choosing the flight  gives an
always negative result: -0.5 VP is the  enemy stays, 0 VP if the enemy
also chooses to flee, average -0.25 VP. On the other hand, choosing to
go on fighting gives more or  less similar probabilities for a victory
and for a defeat. On average, the win is 0 VP. There is no distinction
between  desperate  cases where  the  aircraft  has  just one  or  two
remaining hit points and the comfortable situations where there are 11
hit points remaining. So the cyber pilots prefer to stay.

What  should be  done is  to filter  the results  from previous  games
according to the current level of damages. If a pilot is page 223 with
only  2 hit  points  remaining from  the initial  12,  the search  for
previous games will give more importance to game turns where the pilot
had 1, 2 or  3 hit points remaining than to game turns  where he had 8
hit points or more.  With this method, may be the  pilots will flee in
this situation.

On the other hand, in training mode, fleeing is not useful, because it
shortens the  training session and it  reduces the amount of  data for
future fights.  For this reason, I  have created a I<à  outrance> ("no
quarters") mode, where  choosing the attack has  a greater probability
than choosing to flee.


=head1 License

This text is published under the CC-BY-NC-ND license: Attribution-NonCommercial-NoDerivs 2.0 Generic.

Some pictures might have a different license. In this case, it is shown after the picture.
