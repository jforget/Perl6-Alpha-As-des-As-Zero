# -*- encoding: utf-8; indent-tabs-mode: nil -*-

=encoding utf-8

=head1 INTRODUCTION

The programs for playing I<Ace of Aces> rely on an associaton table
listing the associations (start page, maneuver) → end page, stored in
a JSON file. We can type this JSON file by copying the 222-page
booklet, with 25 maneuvers per page, that is, 5550 entries. This is
boring and error-prone. And you have to do this for at least two
booklets.

Fortunately, the different pages represent the location and heading of a 
plane on a 37-hexagon grid, with 6 possible headings. By using this
underlying geometry, we can just copy a significant subset of associations
(start page, maneuver) → end page and generate the other by geometrical
computation and by inference.

Additionally, all the games of the series use the same 37-hexagon grid with
the same numbering. So, you have to build an electronic version of the
37-hexagon grid only once, and then you can initialize any booklet by 
specifying the 13 to 26 maneuvers (plus the fire table, which is harder to
compute).

So I built the electronic version of the hex-grid using the FW190 booklet
from I<Wingleader>, then I checked it by generating the booklets for
the Sopwith Camel and the Fokker DR1 from I<Handy Rotary> and for the 
P-51 and the FW190 from I<Wingleader>. I also generated booklets for
a new game involving a sparrohawk and a hobbyist's drone.

=head1 SPARROWHAWK vs. HOBBYIST DRONE

For copyright reasons, I do not want to publish on Github the JSON files
for the Sopwith Camel, the Fokker DR1, the P-51 Mustang and the FW190.
The patent has expired, but not the copyright on I<Handy Rotary> and
I<Wingleader>. So I created a game "sparrowhawk vs. hobbyist drone",
after recent incident reports describing brutal encounters between
birds of prey and drones. In the game, the drone tries to film the bird, while the
brid tries to destroy the drone.

While most animals and most vehicules on Earth have a front / back
orientation, the drone, a quadcopter, has no real orientation for its
movements, a bit like jellyfish and sea anemones. It can easily move
backward or sideways as easily as forward. It still has a front / back
orientation, because I consider that the camera is rigidly fixed on
the drone frame, so the front of the drone is the view field of the
camera.

I do not pretend that the game is interesting, especially since I do not
provide the pictures which are an important element for human players.
I do not pretend either it is balanced. But the game has been created by me,
so I am entitled to publish it on Github or elsewhere under any free license I choose.

In the following, I describe the preparation as if I had used the "Drone" booklet
since the beginning.

=head1 STEPS

=head2 Typing

Using your preferred text editor, write a F<Drone-init.json> file. This file
describes the maneuvers the drone can execute and the pages where it can 
"shoot" at the sparrowhawk (actually shooting film). The file does not contain
any association (start page, maneuver) → endpage.

=head2 Initialization

The F<init.p6> program initializes or resets a F<aoa_prep> MongoDB database.

Then it copies the contents of F<Drone-init.json> in a C<Manoeuvres> 
collection (French for "maneuvers"). And it initializes another collection,
C<Pages>, with only two pages: page 223, which has a special status and
page 187, an ordinary page from which we will bootstrap the geometrical description.

The choice of page 187 is partly an abritrary one. This is the page
where both planes are in the same hex with the same heading. But I could have
bootstraped the process with any other ordinary page.

=head2 Incremental Update

Program F<maj.p6> is a command-line program, which receives as input parameters
a page number, plus the associations maneuver → end page. For example, the first
time it will run, the command line will be:

  perl6 maj.p6 --page=187 -a=205 -b=187 -c=198 -d=3 -e=15 -f=16 -g=2 -h=17 -i=1

That means that when the start page is page 187, the end page for maneuver C<"A">
is page 205, the end page for maneuver C<"B"> is page 187 and so on.
If the command line parameters include an unknown page, the program
creates it in the C<Pages> collection, initializing its position in the
hexgrid and the heading of the plane (or drone, or bird, or...).

In addition, the program takes the new pages and applies all the maneuvers
to them. If the result is a known page, the association maneuver → end page
is stored in C<Pages> collection. If the end page is not known yet, no update
takes place.

The program also applies I<backward> the maneuvers to new pages to check other
associations (start page, maneuver) → end page, where the end page is the page
currently processed and the start page is hopefully a page already known.

This backward processing did not exist in the first version, in March 2018, I added it in
June 2018. Instead, I had a paramter triggering a full computation, for all known
pages, old and new alike. Very time-consuming.

=head3 Example

Let us consider a flying machine with fewer maneuvers than the drone. The only
three maneuvers are:

=item * Maneuver A, a port sideslip without heading change to the hex at 10 o'clock

=item * Maneuver B, move forward

=item * Maneuver C, a starboard sideslip without heading change to the hex at 2 o'clock

=back

  .                       --------
  .                      /        \
  .              --------    B     --------
  .             /        \        /        \
  .            (    A     --------     C    )
  .             \        /        \        /
  .              --------  départ  -------- 
  .                      \        /
  .                       -------- 
